import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, O as svg_element, b as space, t as text, c as claim_element, d as children, g as detach, h as claim_space, f as claim_text, j as attr, o as set_style, k as insert, a as append, n as noop, l as component_subscribe, u as url } from './main2.js';

/* src\pages\index.svelte generated by Svelte v3.24.1 */

function create_fragment(ctx) {
	let section0;
	let div17;
	let div16;
	let div3;
	let div2;
	let div0;
	let svg0;
	let path0;
	let t0;
	let div1;
	let h20;
	let t1;
	let t2;
	let ul0;
	let li0;
	let t3;
	let t4;
	let li1;
	let t5;
	let t6;
	let a0;
	let t7;
	let svg1;
	let path1;
	let a0_href_value;
	let t8;
	let div7;
	let div6;
	let div4;
	let svg2;
	let path2;
	let t9;
	let div5;
	let h21;
	let t10;
	let t11;
	let ul1;
	let li2;
	let t12;
	let t13;
	let li3;
	let t14;
	let t15;
	let a1;
	let t16;
	let svg3;
	let path3;
	let a1_href_value;
	let t17;
	let div11;
	let div10;
	let div8;
	let svg4;
	let path4;
	let t18;
	let div9;
	let h22;
	let t19;
	let t20;
	let ul2;
	let li4;
	let t21;
	let t22;
	let li5;
	let t23;
	let t24;
	let a2;
	let t25;
	let svg5;
	let path5;
	let a2_href_value;
	let t26;
	let div15;
	let div14;
	let div12;
	let svg6;
	let path6;
	let t27;
	let div13;
	let h23;
	let t28;
	let t29;
	let ul3;
	let li6;
	let t30;
	let t31;
	let li7;
	let t32;
	let t33;
	let a3;
	let t34;
	let svg7;
	let path7;
	let a3_href_value;
	let t35;
	let hr0;
	let t36;
	let section1;
	let div25;
	let div24;
	let div20;
	let div19;
	let img0;
	let img0_src_value;
	let t37;
	let div18;
	let h24;
	let t38;
	let t39;
	let ul4;
	let li8;
	let t40;
	let t41;
	let li9;
	let t42;
	let t43;
	let li10;
	let t44;
	let t45;
	let a4;
	let t46;
	let svg8;
	let path8;
	let t47;
	let div23;
	let div22;
	let img1;
	let img1_src_value;
	let t48;
	let div21;
	let h25;
	let t49;
	let t50;
	let ul5;
	let li11;
	let t51;
	let t52;
	let li12;
	let t53;
	let t54;
	let li13;
	let t55;
	let t56;
	let a5;
	let t57;
	let svg9;
	let path9;
	let t58;
	let hr1;
	let t59;
	let div27;
	let section2;
	let div26;
	let h26;
	let t60;
	let t61;
	let p;
	let t62;
	let t63;
	let a6;
	let t64;
	let svg10;
	let path10;
	let t65;
	let img2;
	let img2_src_value;

	return {
		c() {
			section0 = element("section");
			div17 = element("div");
			div16 = element("div");
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			svg0 = svg_element("svg");
			path0 = svg_element("path");
			t0 = space();
			div1 = element("div");
			h20 = element("h2");
			t1 = text("Manage database records in your application");
			t2 = space();
			ul0 = element("ul");
			li0 = element("li");
			t3 = text("Inspect tables and schemas");
			t4 = space();
			li1 = element("li");
			t5 = text("Manage records (create, read, update, delete)");
			t6 = space();
			a0 = element("a");
			t7 = text("Go to Records\n              ");
			svg1 = svg_element("svg");
			path1 = svg_element("path");
			t8 = space();
			div7 = element("div");
			div6 = element("div");
			div4 = element("div");
			svg2 = svg_element("svg");
			path2 = svg_element("path");
			t9 = space();
			div5 = element("div");
			h21 = element("h2");
			t10 = text("Manage users");
			t11 = space();
			ul1 = element("ul");
			li2 = element("li");
			t12 = text("Inspect registered users");
			t13 = space();
			li3 = element("li");
			t14 = text("Manage users (create, read, update, delete)");
			t15 = space();
			a1 = element("a");
			t16 = text("Go to Users\n              ");
			svg3 = svg_element("svg");
			path3 = svg_element("path");
			t17 = space();
			div11 = element("div");
			div10 = element("div");
			div8 = element("div");
			svg4 = svg_element("svg");
			path4 = svg_element("path");
			t18 = space();
			div9 = element("div");
			h22 = element("h2");
			t19 = text("Instance Logs");
			t20 = space();
			ul2 = element("ul");
			li4 = element("li");
			t21 = text("View system logs about performance and others");
			t22 = space();
			li5 = element("li");
			t23 = text("View your own logs");
			t24 = space();
			a2 = element("a");
			t25 = text("Go to Logs\n              ");
			svg5 = svg_element("svg");
			path5 = svg_element("path");
			t26 = space();
			div15 = element("div");
			div14 = element("div");
			div12 = element("div");
			svg6 = svg_element("svg");
			path6 = svg_element("path");
			t27 = space();
			div13 = element("div");
			h23 = element("h2");
			t28 = text("Constants editor");
			t29 = space();
			ul3 = element("ul");
			li6 = element("li");
			t30 = text("Check all constants in one place");
			t31 = space();
			li7 = element("li");
			t32 = text("Create, delete, update");
			t33 = space();
			a3 = element("a");
			t34 = text("Go to Constants editor\n              ");
			svg7 = svg_element("svg");
			path7 = svg_element("path");
			t35 = space();
			hr0 = element("hr");
			t36 = space();
			section1 = element("section");
			div25 = element("div");
			div24 = element("div");
			div20 = element("div");
			div19 = element("div");
			img0 = element("img");
			t37 = space();
			div18 = element("div");
			h24 = element("h2");
			t38 = text("Liquid Evaluator");
			t39 = space();
			ul4 = element("ul");
			li8 = element("li");
			t40 = text("Run Liquid code against your instance");
			t41 = space();
			li9 = element("li");
			t42 = text("Test Liquid logic");
			t43 = space();
			li10 = element("li");
			t44 = text("Quickly prototype your ideas");
			t45 = space();
			a4 = element("a");
			t46 = text("Go to Liquid Evaluator\n              ");
			svg8 = svg_element("svg");
			path8 = svg_element("path");
			t47 = space();
			div23 = element("div");
			div22 = element("div");
			img1 = element("img");
			t48 = space();
			div21 = element("div");
			h25 = element("h2");
			t49 = text("GraphiQL");
			t50 = space();
			ul5 = element("ul");
			li11 = element("li");
			t51 = text("Run GraphQL against your instance");
			t52 = space();
			li12 = element("li");
			t53 = text("Explore documentation");
			t54 = space();
			li13 = element("li");
			t55 = text("Quickly prototype your queries and mutations");
			t56 = space();
			a5 = element("a");
			t57 = text("Go to GraphiQL\n              ");
			svg9 = svg_element("svg");
			path9 = svg_element("path");
			t58 = space();
			hr1 = element("hr");
			t59 = space();
			div27 = element("div");
			section2 = element("section");
			div26 = element("div");
			h26 = element("h2");
			t60 = text("Try the new pos-cli gui");
			t61 = space();
			p = element("p");
			t62 = text("Fully operational public beta version available");
			t63 = space();
			a6 = element("a");
			t64 = text("Try it\n        ");
			svg10 = svg_element("svg");
			path10 = svg_element("path");
			t65 = space();
			img2 = element("img");
			this.h();
		},
		l(nodes) {
			section0 = claim_element(nodes, "SECTION", { class: true });
			var section0_nodes = children(section0);
			div17 = claim_element(section0_nodes, "DIV", { class: true });
			var div17_nodes = children(div17);
			div16 = claim_element(div17_nodes, "DIV", { class: true });
			var div16_nodes = children(div16);
			div3 = claim_element(div16_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			svg0 = claim_element(
				div0_nodes,
				"svg",
				{
					fill: true,
					stroke: true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					"stroke-width": true,
					class: true,
					viewBox: true
				},
				1
			);

			var svg0_nodes = children(svg0);
			path0 = claim_element(svg0_nodes, "path", { d: true }, 1);
			children(path0).forEach(detach);
			svg0_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h20 = claim_element(div1_nodes, "H2", { class: true });
			var h20_nodes = children(h20);
			t1 = claim_text(h20_nodes, "Manage database records in your application");
			h20_nodes.forEach(detach);
			t2 = claim_space(div1_nodes);
			ul0 = claim_element(div1_nodes, "UL", { class: true });
			var ul0_nodes = children(ul0);
			li0 = claim_element(ul0_nodes, "LI", {});
			var li0_nodes = children(li0);
			t3 = claim_text(li0_nodes, "Inspect tables and schemas");
			li0_nodes.forEach(detach);
			t4 = claim_space(ul0_nodes);
			li1 = claim_element(ul0_nodes, "LI", {});
			var li1_nodes = children(li1);
			t5 = claim_text(li1_nodes, "Manage records (create, read, update, delete)");
			li1_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			t6 = claim_space(div1_nodes);
			a0 = claim_element(div1_nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			t7 = claim_text(a0_nodes, "Go to Records\n              ");

			svg1 = claim_element(
				a0_nodes,
				"svg",
				{
					fill: true,
					stroke: true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					"stroke-width": true,
					class: true,
					viewBox: true
				},
				1
			);

			var svg1_nodes = children(svg1);
			path1 = claim_element(svg1_nodes, "path", { d: true }, 1);
			children(path1).forEach(detach);
			svg1_nodes.forEach(detach);
			a0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			t8 = claim_space(div16_nodes);
			div7 = claim_element(div16_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div4 = claim_element(div6_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);

			svg2 = claim_element(
				div4_nodes,
				"svg",
				{
					fill: true,
					stroke: true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					"stroke-width": true,
					class: true,
					viewBox: true
				},
				1
			);

			var svg2_nodes = children(svg2);
			path2 = claim_element(svg2_nodes, "path", { d: true }, 1);
			children(path2).forEach(detach);
			svg2_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			t9 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			h21 = claim_element(div5_nodes, "H2", { class: true });
			var h21_nodes = children(h21);
			t10 = claim_text(h21_nodes, "Manage users");
			h21_nodes.forEach(detach);
			t11 = claim_space(div5_nodes);
			ul1 = claim_element(div5_nodes, "UL", { class: true });
			var ul1_nodes = children(ul1);
			li2 = claim_element(ul1_nodes, "LI", {});
			var li2_nodes = children(li2);
			t12 = claim_text(li2_nodes, "Inspect registered users");
			li2_nodes.forEach(detach);
			t13 = claim_space(ul1_nodes);
			li3 = claim_element(ul1_nodes, "LI", {});
			var li3_nodes = children(li3);
			t14 = claim_text(li3_nodes, "Manage users (create, read, update, delete)");
			li3_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			t15 = claim_space(div5_nodes);
			a1 = claim_element(div5_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t16 = claim_text(a1_nodes, "Go to Users\n              ");

			svg3 = claim_element(
				a1_nodes,
				"svg",
				{
					fill: true,
					stroke: true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					"stroke-width": true,
					class: true,
					viewBox: true
				},
				1
			);

			var svg3_nodes = children(svg3);
			path3 = claim_element(svg3_nodes, "path", { d: true }, 1);
			children(path3).forEach(detach);
			svg3_nodes.forEach(detach);
			a1_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			div7_nodes.forEach(detach);
			t17 = claim_space(div16_nodes);
			div11 = claim_element(div16_nodes, "DIV", { class: true });
			var div11_nodes = children(div11);
			div10 = claim_element(div11_nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			div8 = claim_element(div10_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);

			svg4 = claim_element(
				div8_nodes,
				"svg",
				{
					fill: true,
					stroke: true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					"stroke-width": true,
					class: true,
					viewBox: true
				},
				1
			);

			var svg4_nodes = children(svg4);
			path4 = claim_element(svg4_nodes, "path", { d: true }, 1);
			children(path4).forEach(detach);
			svg4_nodes.forEach(detach);
			div8_nodes.forEach(detach);
			t18 = claim_space(div10_nodes);
			div9 = claim_element(div10_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			h22 = claim_element(div9_nodes, "H2", { class: true });
			var h22_nodes = children(h22);
			t19 = claim_text(h22_nodes, "Instance Logs");
			h22_nodes.forEach(detach);
			t20 = claim_space(div9_nodes);
			ul2 = claim_element(div9_nodes, "UL", { class: true });
			var ul2_nodes = children(ul2);
			li4 = claim_element(ul2_nodes, "LI", {});
			var li4_nodes = children(li4);
			t21 = claim_text(li4_nodes, "View system logs about performance and others");
			li4_nodes.forEach(detach);
			t22 = claim_space(ul2_nodes);
			li5 = claim_element(ul2_nodes, "LI", {});
			var li5_nodes = children(li5);
			t23 = claim_text(li5_nodes, "View your own logs");
			li5_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			t24 = claim_space(div9_nodes);
			a2 = claim_element(div9_nodes, "A", { href: true, class: true });
			var a2_nodes = children(a2);
			t25 = claim_text(a2_nodes, "Go to Logs\n              ");

			svg5 = claim_element(
				a2_nodes,
				"svg",
				{
					fill: true,
					stroke: true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					"stroke-width": true,
					class: true,
					viewBox: true
				},
				1
			);

			var svg5_nodes = children(svg5);
			path5 = claim_element(svg5_nodes, "path", { d: true }, 1);
			children(path5).forEach(detach);
			svg5_nodes.forEach(detach);
			a2_nodes.forEach(detach);
			div9_nodes.forEach(detach);
			div10_nodes.forEach(detach);
			div11_nodes.forEach(detach);
			t26 = claim_space(div16_nodes);
			div15 = claim_element(div16_nodes, "DIV", { class: true });
			var div15_nodes = children(div15);
			div14 = claim_element(div15_nodes, "DIV", { class: true });
			var div14_nodes = children(div14);
			div12 = claim_element(div14_nodes, "DIV", { class: true });
			var div12_nodes = children(div12);

			svg6 = claim_element(
				div12_nodes,
				"svg",
				{
					fill: true,
					stroke: true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					"stroke-width": true,
					class: true,
					viewBox: true
				},
				1
			);

			var svg6_nodes = children(svg6);
			path6 = claim_element(svg6_nodes, "path", { d: true }, 1);
			children(path6).forEach(detach);
			svg6_nodes.forEach(detach);
			div12_nodes.forEach(detach);
			t27 = claim_space(div14_nodes);
			div13 = claim_element(div14_nodes, "DIV", { class: true });
			var div13_nodes = children(div13);
			h23 = claim_element(div13_nodes, "H2", { class: true });
			var h23_nodes = children(h23);
			t28 = claim_text(h23_nodes, "Constants editor");
			h23_nodes.forEach(detach);
			t29 = claim_space(div13_nodes);
			ul3 = claim_element(div13_nodes, "UL", { class: true });
			var ul3_nodes = children(ul3);
			li6 = claim_element(ul3_nodes, "LI", {});
			var li6_nodes = children(li6);
			t30 = claim_text(li6_nodes, "Check all constants in one place");
			li6_nodes.forEach(detach);
			t31 = claim_space(ul3_nodes);
			li7 = claim_element(ul3_nodes, "LI", {});
			var li7_nodes = children(li7);
			t32 = claim_text(li7_nodes, "Create, delete, update");
			li7_nodes.forEach(detach);
			ul3_nodes.forEach(detach);
			t33 = claim_space(div13_nodes);
			a3 = claim_element(div13_nodes, "A", { href: true, class: true });
			var a3_nodes = children(a3);
			t34 = claim_text(a3_nodes, "Go to Constants editor\n              ");

			svg7 = claim_element(
				a3_nodes,
				"svg",
				{
					fill: true,
					stroke: true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					"stroke-width": true,
					class: true,
					viewBox: true
				},
				1
			);

			var svg7_nodes = children(svg7);
			path7 = claim_element(svg7_nodes, "path", { d: true }, 1);
			children(path7).forEach(detach);
			svg7_nodes.forEach(detach);
			a3_nodes.forEach(detach);
			div13_nodes.forEach(detach);
			div14_nodes.forEach(detach);
			div15_nodes.forEach(detach);
			div16_nodes.forEach(detach);
			div17_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t35 = claim_space(nodes);
			hr0 = claim_element(nodes, "HR", {});
			t36 = claim_space(nodes);
			section1 = claim_element(nodes, "SECTION", { class: true });
			var section1_nodes = children(section1);
			div25 = claim_element(section1_nodes, "DIV", { class: true });
			var div25_nodes = children(div25);
			div24 = claim_element(div25_nodes, "DIV", { class: true });
			var div24_nodes = children(div24);
			div20 = claim_element(div24_nodes, "DIV", { class: true });
			var div20_nodes = children(div20);
			div19 = claim_element(div20_nodes, "DIV", { class: true });
			var div19_nodes = children(div19);
			img0 = claim_element(div19_nodes, "IMG", { src: true, alt: true, class: true });
			t37 = claim_space(div19_nodes);
			div18 = claim_element(div19_nodes, "DIV", { class: true });
			var div18_nodes = children(div18);
			h24 = claim_element(div18_nodes, "H2", { class: true });
			var h24_nodes = children(h24);
			t38 = claim_text(h24_nodes, "Liquid Evaluator");
			h24_nodes.forEach(detach);
			t39 = claim_space(div18_nodes);
			ul4 = claim_element(div18_nodes, "UL", { class: true });
			var ul4_nodes = children(ul4);
			li8 = claim_element(ul4_nodes, "LI", {});
			var li8_nodes = children(li8);
			t40 = claim_text(li8_nodes, "Run Liquid code against your instance");
			li8_nodes.forEach(detach);
			t41 = claim_space(ul4_nodes);
			li9 = claim_element(ul4_nodes, "LI", {});
			var li9_nodes = children(li9);
			t42 = claim_text(li9_nodes, "Test Liquid logic");
			li9_nodes.forEach(detach);
			t43 = claim_space(ul4_nodes);
			li10 = claim_element(ul4_nodes, "LI", {});
			var li10_nodes = children(li10);
			t44 = claim_text(li10_nodes, "Quickly prototype your ideas");
			li10_nodes.forEach(detach);
			ul4_nodes.forEach(detach);
			t45 = claim_space(div18_nodes);
			a4 = claim_element(div18_nodes, "A", { href: true, target: true, class: true });
			var a4_nodes = children(a4);
			t46 = claim_text(a4_nodes, "Go to Liquid Evaluator\n              ");

			svg8 = claim_element(
				a4_nodes,
				"svg",
				{
					fill: true,
					stroke: true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					"stroke-width": true,
					class: true,
					viewBox: true
				},
				1
			);

			var svg8_nodes = children(svg8);
			path8 = claim_element(svg8_nodes, "path", { d: true }, 1);
			children(path8).forEach(detach);
			svg8_nodes.forEach(detach);
			a4_nodes.forEach(detach);
			div18_nodes.forEach(detach);
			div19_nodes.forEach(detach);
			div20_nodes.forEach(detach);
			t47 = claim_space(div24_nodes);
			div23 = claim_element(div24_nodes, "DIV", { class: true });
			var div23_nodes = children(div23);
			div22 = claim_element(div23_nodes, "DIV", { class: true });
			var div22_nodes = children(div22);
			img1 = claim_element(div22_nodes, "IMG", { src: true, alt: true, class: true });
			t48 = claim_space(div22_nodes);
			div21 = claim_element(div22_nodes, "DIV", { class: true });
			var div21_nodes = children(div21);
			h25 = claim_element(div21_nodes, "H2", { class: true });
			var h25_nodes = children(h25);
			t49 = claim_text(h25_nodes, "GraphiQL");
			h25_nodes.forEach(detach);
			t50 = claim_space(div21_nodes);
			ul5 = claim_element(div21_nodes, "UL", { class: true });
			var ul5_nodes = children(ul5);
			li11 = claim_element(ul5_nodes, "LI", {});
			var li11_nodes = children(li11);
			t51 = claim_text(li11_nodes, "Run GraphQL against your instance");
			li11_nodes.forEach(detach);
			t52 = claim_space(ul5_nodes);
			li12 = claim_element(ul5_nodes, "LI", {});
			var li12_nodes = children(li12);
			t53 = claim_text(li12_nodes, "Explore documentation");
			li12_nodes.forEach(detach);
			t54 = claim_space(ul5_nodes);
			li13 = claim_element(ul5_nodes, "LI", {});
			var li13_nodes = children(li13);
			t55 = claim_text(li13_nodes, "Quickly prototype your queries and mutations");
			li13_nodes.forEach(detach);
			ul5_nodes.forEach(detach);
			t56 = claim_space(div21_nodes);
			a5 = claim_element(div21_nodes, "A", { href: true, target: true, class: true });
			var a5_nodes = children(a5);
			t57 = claim_text(a5_nodes, "Go to GraphiQL\n              ");

			svg9 = claim_element(
				a5_nodes,
				"svg",
				{
					fill: true,
					stroke: true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					"stroke-width": true,
					class: true,
					viewBox: true
				},
				1
			);

			var svg9_nodes = children(svg9);
			path9 = claim_element(svg9_nodes, "path", { d: true }, 1);
			children(path9).forEach(detach);
			svg9_nodes.forEach(detach);
			a5_nodes.forEach(detach);
			div21_nodes.forEach(detach);
			div22_nodes.forEach(detach);
			div23_nodes.forEach(detach);
			div24_nodes.forEach(detach);
			div25_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t58 = claim_space(nodes);
			hr1 = claim_element(nodes, "HR", {});
			t59 = claim_space(nodes);
			div27 = claim_element(nodes, "DIV", { class: true });
			var div27_nodes = children(div27);
			section2 = claim_element(div27_nodes, "SECTION", { class: true, style: true });
			var section2_nodes = children(section2);
			div26 = claim_element(section2_nodes, "DIV", {});
			var div26_nodes = children(div26);
			h26 = claim_element(div26_nodes, "H2", { class: true });
			var h26_nodes = children(h26);
			t60 = claim_text(h26_nodes, "Try the new pos-cli gui");
			h26_nodes.forEach(detach);
			t61 = claim_space(div26_nodes);
			p = claim_element(div26_nodes, "P", { class: true });
			var p_nodes = children(p);
			t62 = claim_text(p_nodes, "Fully operational public beta version available");
			p_nodes.forEach(detach);
			t63 = claim_space(div26_nodes);
			a6 = claim_element(div26_nodes, "A", { href: true, class: true });
			var a6_nodes = children(a6);
			t64 = claim_text(a6_nodes, "Try it\n        ");

			svg10 = claim_element(
				a6_nodes,
				"svg",
				{
					fill: true,
					stroke: true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					"stroke-width": true,
					class: true,
					viewBox: true
				},
				1
			);

			var svg10_nodes = children(svg10);
			path10 = claim_element(svg10_nodes, "path", { d: true }, 1);
			children(path10).forEach(detach);
			svg10_nodes.forEach(detach);
			a6_nodes.forEach(detach);
			div26_nodes.forEach(detach);
			t65 = claim_space(section2_nodes);

			img2 = claim_element(section2_nodes, "IMG", {
				src: true,
				alt: true,
				width: true,
				height: true
			});

			section2_nodes.forEach(detach);
			div27_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M22 12h-4l-3 9L9 3l-3 9H2");
			attr(svg0, "fill", "none");
			attr(svg0, "stroke", "currentColor");
			attr(svg0, "stroke-linecap", "round");
			attr(svg0, "stroke-linejoin", "round");
			attr(svg0, "stroke-width", "2");
			attr(svg0, "class", "w-8 h-8");
			attr(svg0, "viewBox", "0 0 24 24");
			attr(div0, "class", "inline-flex items-center justify-center flex-shrink-0 w-16 h-16 mb-4 text-blue-500 bg-blue-100 rounded-full sm:mr-8 sm:mb-0");
			attr(h20, "class", "mb-3 text-lg font-medium text-gray-900 title-font");
			attr(ul0, "class", "list-disc list-inside");
			attr(path1, "d", "M5 12h14M12 5l7 7-7 7");
			attr(svg1, "fill", "none");
			attr(svg1, "stroke", "currentColor");
			attr(svg1, "stroke-linecap", "round");
			attr(svg1, "stroke-linejoin", "round");
			attr(svg1, "stroke-width", "2");
			attr(svg1, "class", "w-4 h-4 ml-2");
			attr(svg1, "viewBox", "0 0 24 24");
			attr(a0, "href", a0_href_value = /*$url*/ ctx[0]("../Models/index"));
			attr(a0, "class", "inline-flex items-center mt-3 text-blue-500");
			attr(div1, "class", "flex-grow ml-8");
			attr(div2, "class", "flex p-8 border-2 border-gray-200 rounded-lg sm:flex-row");
			attr(div3, "class", "p-4 lg:w-1/2 md:w-full");
			attr(path2, "d", "M22 12h-4l-3 9L9 3l-3 9H2");
			attr(svg2, "fill", "none");
			attr(svg2, "stroke", "currentColor");
			attr(svg2, "stroke-linecap", "round");
			attr(svg2, "stroke-linejoin", "round");
			attr(svg2, "stroke-width", "2");
			attr(svg2, "class", "w-8 h-8");
			attr(svg2, "viewBox", "0 0 24 24");
			attr(div4, "class", "inline-flex items-center justify-center flex-shrink-0 w-16 h-16 mb-4 text-blue-500 bg-blue-100 rounded-full sm:mr-8 sm:mb-0");
			attr(h21, "class", "mb-3 text-lg font-medium text-gray-900 title-font");
			attr(ul1, "class", "list-disc list-inside");
			attr(path3, "d", "M5 12h14M12 5l7 7-7 7");
			attr(svg3, "fill", "none");
			attr(svg3, "stroke", "currentColor");
			attr(svg3, "stroke-linecap", "round");
			attr(svg3, "stroke-linejoin", "round");
			attr(svg3, "stroke-width", "2");
			attr(svg3, "class", "w-4 h-4 ml-2");
			attr(svg3, "viewBox", "0 0 24 24");
			attr(a1, "href", a1_href_value = /*$url*/ ctx[0]("../Users/index"));
			attr(a1, "class", "inline-flex items-center mt-3 text-blue-500");
			attr(div5, "class", "flex-grow ml-8");
			attr(div6, "class", "flex p-8 border-2 border-gray-200 rounded-lg sm:flex-row");
			attr(div7, "class", "p-4 lg:w-1/2 md:w-full");
			attr(path4, "d", "M22 12h-4l-3 9L9 3l-3 9H2");
			attr(svg4, "fill", "none");
			attr(svg4, "stroke", "currentColor");
			attr(svg4, "stroke-linecap", "round");
			attr(svg4, "stroke-linejoin", "round");
			attr(svg4, "stroke-width", "2");
			attr(svg4, "class", "w-8 h-8");
			attr(svg4, "viewBox", "0 0 24 24");
			attr(div8, "class", "inline-flex items-center justify-center flex-shrink-0 w-16 h-16 mb-4 text-blue-500 bg-blue-100 rounded-full sm:mr-8 sm:mb-0");
			attr(h22, "class", "mb-3 text-lg font-medium text-gray-900 title-font");
			attr(ul2, "class", "list-disc list-inside");
			attr(path5, "d", "M5 12h14M12 5l7 7-7 7");
			attr(svg5, "fill", "none");
			attr(svg5, "stroke", "currentColor");
			attr(svg5, "stroke-linecap", "round");
			attr(svg5, "stroke-linejoin", "round");
			attr(svg5, "stroke-width", "2");
			attr(svg5, "class", "w-4 h-4 ml-2");
			attr(svg5, "viewBox", "0 0 24 24");
			attr(a2, "href", a2_href_value = /*$url*/ ctx[0]("/Logs"));
			attr(a2, "class", "inline-flex items-center mt-3 text-blue-500");
			attr(div9, "class", "flex-grow ml-8");
			attr(div10, "class", "flex p-8 border-2 border-gray-200 rounded-lg sm:flex-row");
			attr(div11, "class", "p-4 lg:w-1/2 md:w-full");
			attr(path6, "d", "M22 12h-4l-3 9L9 3l-3 9H2");
			attr(svg6, "fill", "none");
			attr(svg6, "stroke", "currentColor");
			attr(svg6, "stroke-linecap", "round");
			attr(svg6, "stroke-linejoin", "round");
			attr(svg6, "stroke-width", "2");
			attr(svg6, "class", "w-8 h-8");
			attr(svg6, "viewBox", "0 0 24 24");
			attr(div12, "class", "inline-flex items-center justify-center flex-shrink-0 w-16 h-16 mb-4 text-blue-500 bg-blue-100 rounded-full sm:mr-8 sm:mb-0");
			attr(h23, "class", "mb-3 text-lg font-medium text-gray-900 title-font");
			attr(ul3, "class", "list-disc list-inside");
			attr(path7, "d", "M5 12h14M12 5l7 7-7 7");
			attr(svg7, "fill", "none");
			attr(svg7, "stroke", "currentColor");
			attr(svg7, "stroke-linecap", "round");
			attr(svg7, "stroke-linejoin", "round");
			attr(svg7, "stroke-width", "2");
			attr(svg7, "class", "w-4 h-4 ml-2");
			attr(svg7, "viewBox", "0 0 24 24");
			attr(a3, "href", a3_href_value = /*$url*/ ctx[0]("/Constants"));
			attr(a3, "class", "inline-flex items-center mt-3 text-blue-500");
			attr(div13, "class", "flex-grow ml-8");
			attr(div14, "class", "flex p-8 border-2 border-gray-200 rounded-lg sm:flex-row");
			attr(div15, "class", "p-4 lg:w-1/2 md:w-full");
			attr(div16, "class", "flex flex-wrap w-full -m-4");
			attr(div17, "class", "container flex flex-wrap py-8 mx-auto");
			attr(section0, "class", "text-gray-700 ");
			if (img0.src !== (img0_src_value = "./dupa.png")) attr(img0, "src", img0_src_value);
			attr(img0, "alt", "Liquid Evaluator");
			attr(img0, "class", "w-1/3 mr-6 shadow-md");
			attr(h24, "class", "mb-3 text-lg font-medium text-gray-900 title-font");
			attr(ul4, "class", "text-sm list-disc list-inside");
			attr(path8, "d", "M5 12h14M12 5l7 7-7 7");
			attr(svg8, "fill", "none");
			attr(svg8, "stroke", "currentColor");
			attr(svg8, "stroke-linecap", "round");
			attr(svg8, "stroke-linejoin", "round");
			attr(svg8, "stroke-width", "2");
			attr(svg8, "class", "w-4 h-4 ml-2");
			attr(svg8, "viewBox", "0 0 24 24");
			attr(a4, "href", "/gui/liquid");
			attr(a4, "target", "_blank");
			attr(a4, "class", "inline-flex items-center mt-3 text-blue-500");
			attr(div18, "class", "flex-grow");
			attr(div19, "class", "flex p-8 border-2 border-gray-200 rounded-lg");
			attr(div20, "class", "p-4 lg:w-1/2 md:w-full");
			if (img1.src !== (img1_src_value = "./graphiql.png")) attr(img1, "src", img1_src_value);
			attr(img1, "alt", "Liquid Evaluator");
			attr(img1, "class", "w-1/3 mr-6 shadow-md");
			attr(h25, "class", "mb-3 text-lg font-medium text-gray-900 title-font");
			attr(ul5, "class", "text-sm list-disc list-inside");
			attr(path9, "d", "M5 12h14M12 5l7 7-7 7");
			attr(svg9, "fill", "none");
			attr(svg9, "stroke", "currentColor");
			attr(svg9, "stroke-linecap", "round");
			attr(svg9, "stroke-linejoin", "round");
			attr(svg9, "stroke-width", "2");
			attr(svg9, "class", "w-4 h-4 ml-2");
			attr(svg9, "viewBox", "0 0 24 24");
			attr(a5, "href", "/gui/graphql");
			attr(a5, "target", "_blank");
			attr(a5, "class", "inline-flex items-center mt-3 text-blue-500");
			attr(div21, "class", "flex-grow");
			attr(div22, "class", "flex p-8 border-2 border-gray-200 rounded-lg");
			attr(div23, "class", "p-4 lg:w-1/2 md:w-full");
			attr(div24, "class", "flex flex-wrap w-full -m-4");
			attr(div25, "class", "container flex flex-wrap py-8 mx-auto");
			attr(section1, "class", "text-gray-700 ");
			attr(h26, "class", "mb-3 text-2xl font-medium text-gray-900 title-font");
			attr(p, "class", "mb-8");
			attr(path10, "d", "M5 12h14M12 5l7 7-7 7");
			attr(svg10, "fill", "none");
			attr(svg10, "stroke", "currentColor");
			attr(svg10, "stroke-linecap", "round");
			attr(svg10, "stroke-linejoin", "round");
			attr(svg10, "stroke-width", "2");
			attr(svg10, "class", "w-4 h-4");
			attr(svg10, "viewBox", "0 0 24 24");
			attr(a6, "href", "http://localhost:3334");
			attr(a6, "class", "px-4 py-2 inline-flex items-center gap-4 bg-blue-500 text-white rounded");
			if (img2.src !== (img2_src_value = "/tryNew.png")) attr(img2, "src", img2_src_value);
			attr(img2, "alt", "");
			attr(img2, "width", "473");
			attr(img2, "height", "309");
			attr(section2, "class", "w-full p-8 border-2 border-gray-200 rounded-lg bg-no-repeat bg-right flex flex-col gap-14 md:flex-row items-center justify-center");
			set_style(section2, "min-height", "450px");
			set_style(section2, "background-color", "#f5f6fc");
			attr(div27, "class", "container flex flex-wrap py-8 mx-auto");
		},
		m(target, anchor) {
			insert(target, section0, anchor);
			append(section0, div17);
			append(div17, div16);
			append(div16, div3);
			append(div3, div2);
			append(div2, div0);
			append(div0, svg0);
			append(svg0, path0);
			append(div2, t0);
			append(div2, div1);
			append(div1, h20);
			append(h20, t1);
			append(div1, t2);
			append(div1, ul0);
			append(ul0, li0);
			append(li0, t3);
			append(ul0, t4);
			append(ul0, li1);
			append(li1, t5);
			append(div1, t6);
			append(div1, a0);
			append(a0, t7);
			append(a0, svg1);
			append(svg1, path1);
			append(div16, t8);
			append(div16, div7);
			append(div7, div6);
			append(div6, div4);
			append(div4, svg2);
			append(svg2, path2);
			append(div6, t9);
			append(div6, div5);
			append(div5, h21);
			append(h21, t10);
			append(div5, t11);
			append(div5, ul1);
			append(ul1, li2);
			append(li2, t12);
			append(ul1, t13);
			append(ul1, li3);
			append(li3, t14);
			append(div5, t15);
			append(div5, a1);
			append(a1, t16);
			append(a1, svg3);
			append(svg3, path3);
			append(div16, t17);
			append(div16, div11);
			append(div11, div10);
			append(div10, div8);
			append(div8, svg4);
			append(svg4, path4);
			append(div10, t18);
			append(div10, div9);
			append(div9, h22);
			append(h22, t19);
			append(div9, t20);
			append(div9, ul2);
			append(ul2, li4);
			append(li4, t21);
			append(ul2, t22);
			append(ul2, li5);
			append(li5, t23);
			append(div9, t24);
			append(div9, a2);
			append(a2, t25);
			append(a2, svg5);
			append(svg5, path5);
			append(div16, t26);
			append(div16, div15);
			append(div15, div14);
			append(div14, div12);
			append(div12, svg6);
			append(svg6, path6);
			append(div14, t27);
			append(div14, div13);
			append(div13, h23);
			append(h23, t28);
			append(div13, t29);
			append(div13, ul3);
			append(ul3, li6);
			append(li6, t30);
			append(ul3, t31);
			append(ul3, li7);
			append(li7, t32);
			append(div13, t33);
			append(div13, a3);
			append(a3, t34);
			append(a3, svg7);
			append(svg7, path7);
			insert(target, t35, anchor);
			insert(target, hr0, anchor);
			insert(target, t36, anchor);
			insert(target, section1, anchor);
			append(section1, div25);
			append(div25, div24);
			append(div24, div20);
			append(div20, div19);
			append(div19, img0);
			append(div19, t37);
			append(div19, div18);
			append(div18, h24);
			append(h24, t38);
			append(div18, t39);
			append(div18, ul4);
			append(ul4, li8);
			append(li8, t40);
			append(ul4, t41);
			append(ul4, li9);
			append(li9, t42);
			append(ul4, t43);
			append(ul4, li10);
			append(li10, t44);
			append(div18, t45);
			append(div18, a4);
			append(a4, t46);
			append(a4, svg8);
			append(svg8, path8);
			append(div24, t47);
			append(div24, div23);
			append(div23, div22);
			append(div22, img1);
			append(div22, t48);
			append(div22, div21);
			append(div21, h25);
			append(h25, t49);
			append(div21, t50);
			append(div21, ul5);
			append(ul5, li11);
			append(li11, t51);
			append(ul5, t52);
			append(ul5, li12);
			append(li12, t53);
			append(ul5, t54);
			append(ul5, li13);
			append(li13, t55);
			append(div21, t56);
			append(div21, a5);
			append(a5, t57);
			append(a5, svg9);
			append(svg9, path9);
			insert(target, t58, anchor);
			insert(target, hr1, anchor);
			insert(target, t59, anchor);
			insert(target, div27, anchor);
			append(div27, section2);
			append(section2, div26);
			append(div26, h26);
			append(h26, t60);
			append(div26, t61);
			append(div26, p);
			append(p, t62);
			append(div26, t63);
			append(div26, a6);
			append(a6, t64);
			append(a6, svg10);
			append(svg10, path10);
			append(section2, t65);
			append(section2, img2);
		},
		p(ctx, [dirty]) {
			if (dirty & /*$url*/ 1 && a0_href_value !== (a0_href_value = /*$url*/ ctx[0]("../Models/index"))) {
				attr(a0, "href", a0_href_value);
			}

			if (dirty & /*$url*/ 1 && a1_href_value !== (a1_href_value = /*$url*/ ctx[0]("../Users/index"))) {
				attr(a1, "href", a1_href_value);
			}

			if (dirty & /*$url*/ 1 && a2_href_value !== (a2_href_value = /*$url*/ ctx[0]("/Logs"))) {
				attr(a2, "href", a2_href_value);
			}

			if (dirty & /*$url*/ 1 && a3_href_value !== (a3_href_value = /*$url*/ ctx[0]("/Constants"))) {
				attr(a3, "href", a3_href_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section0);
			if (detaching) detach(t35);
			if (detaching) detach(hr0);
			if (detaching) detach(t36);
			if (detaching) detach(section1);
			if (detaching) detach(t58);
			if (detaching) detach(hr1);
			if (detaching) detach(t59);
			if (detaching) detach(div27);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $url;
	component_subscribe($$self, url, $$value => $$invalidate(0, $url = $$value));
	return [$url];
}

class Pages extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Pages;
