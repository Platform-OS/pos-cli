#!/usr/bin/env node

const program = require('commander'),
  request = require('request'),
  log = require('./lib/logFormat'),
  fs = require('fs'),
  watch = require('node-watch'),
  version = require("./package.json").version;

const shouldBeSynced = (path, event) => {
  return !fileRemoved(event) &&
    extensionAllowed(ext(path)) &&
    !isHiddenFile(filename(path));
};

const isHiddenFile = (filename) => {
  return filename.startsWith('.');
}

const extensionAllowed = (ext) => program.files.split(',').includes(ext);
const filename = (path) => path.split('/').pop();
const ext = (path) => path.split('.').pop();
const fileRemoved = (event) => event === 'remove';

program
  .version(version)
  .option('--api-key <apiKey>', 'your API KEY', process.env.MARKETPLACE_API_KEY)
  .option('--url <url>', 'instance endpoint', process.env.MARKETPLACE_URL)
  .option('--files <files>', 'watch files', process.env.FILES || 'js,css,liquid,graphql,yml,html,ttf,otf,woff,woff2,svg,ico,gif,jpg,jpeg,png,webp,webm,mp3,mp4,csv,xls,pdf,doc,docx')
  .parse(process.argv);

if (typeof program.apiKey === 'undefined') {
  log.Error('no API KEY given!');
  process.exit(1);
}
if (typeof program.url === 'undefined') {
  log.Error('no URL given!');
  process.exit(1);
}

log.Banner();
log.Info(`Sync mode enabled for ${program.files} files.`);

watch('marketplace_builder/', { recursive: true }, (event, file) => {
  shouldBeSynced(file, event) && pushFile(file);
});

const pushFile = (path) => {
  log.Quiet(`syncing: ${path} started`);
  request({
    uri: program.url + 'api/marketplace_builder/marketplace_releases/sync',
    method: 'PUT',
    headers: { 'UserTemporaryToken': program.apiKey },
    formData: {
      path: path.replace('marketplace_builder/',''),
      marketplace_builder_file_body: fs.createReadStream(path)
    }
  }, (error, response, body) => {
    if (error)
      log.Error(error);
    else {
      log.Done(`syncing: ${path}'`);
      if (body != '{}') {
          log.Error(JSON.parse(body)["error"]);
          log.Warn(body);
      }
    }
  });
};
