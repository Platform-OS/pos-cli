#!/usr/bin/env node

const program = require('commander'),
  log = require('./lib/logFormat'),
  request = require('request'),
  fs = require('fs'),
  handleResponse = require('./lib/handleResponse'),
  version = require("./package.json").version;

const fetchDeploymentStatus = (id, authData) => {
  return new Promise((resolve, reject) => {
    request({
      uri: authData.url + 'api/marketplace_builder/marketplace_releases/'+id,
      method: 'GET',
      headers: { 'UserTemporaryToken': authData.apiKey }
    }, (error, response, body) => {
      if (error) {
        log.Error(error);
        process.exit(1);
      } else {
        if (JSON.parse(body).status === 'ready_for_import')
          reject();
        else
          resolve(body);
      };
    });
  });
};

const getDeploymentStatus = (id, authData) => {
  return new Promise((resolve, reject) => {
    (getStatus = () => {
      fetchDeploymentStatus(id, authData)
        .then(
          (status) => {
            const jsonStatus = JSON.parse(status);
            if (jsonStatus.status === 'error')
              reject(jsonStatus.error);
            else
              resolve(status);
          },
          () => {
            process.stdout.write('.');
            setTimeout(getStatus, 1500);
          }
        );
    })();
  });
};

const pushFile = (path) => {
  request({
    uri: program.url + 'api/marketplace_builder/marketplace_releases',
    method: 'POST',
    headers: { 'UserTemporaryToken': program.apiKey },
    formData: {
      'marketplace_builder[zip_file]': fs.createReadStream(path),
      'marketplace_builder[force_mode]': (program.force || process.env.FORCE || '').toString()
    }
  }, (error, response, body) => {
    handleResponse(error, response, body, (body) => {
      const responseBody = JSON.parse(body);
      getDeploymentStatus(responseBody.id, program)
        .then(
          () => log.Success('\nDONE'),
          (error) => {
            log.Error('\nERROR:', error);
            process.exit(1);
          }
        );
    });
  });
};

program
  .version(version)
  .option('--api-key <apiKey>', 'API KEY', process.env.MARKETPLACE_API_KEY)
  .option('--url <url>', 'instance endpoint', process.env.MARKETPLACE_URL)
  .option('-f --force', 'force update', process.env.FORCE); // not using force argument from parent process env

program.parse(process.argv);

if (typeof program.apiKey === 'undefined') {
  log.Error('no API KEY given!');
  process.exit(1);
}
if (typeof program.url === 'undefined') {
  log.Error('no URL given!');
  process.exit(1);
}

log.Info('Deploying to: %s', program.url);

pushFile('./tmp/marketplace-release.zip');
